####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0
children=4
debug_mode=no
auto_aliases=no

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
modparam("rr", "append_fromtag", 1) # Needed by UAC

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### DB_MYSQL
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   2)

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")


### NAT HELPER
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "natping_tcp", 1)

### RTPENGINE
loadmodule "rtpengine.so"
modparam("rtpengine","rtpengine_sock","udp:127.0.0.1:22222")

### MID REGISTRAR
loadmodule "mid_registrar.so"
modparam("mid_registrar", "mode", 1)
modparam("mid_registrar", "outgoing_expires", 7200)
modparam("mid_registrar", "insertion_mode", 0)
modparam("nathelper|mid_registrar", "received_avp", "$avp(received)")

### AVPOPS
loadmodule "avpops.so"

### DIALOG
loadmodule "dialog.so"

### Topology Hiding
loadmodule "topology_hiding.so"
modparam("topology_hiding", "force_dialog", 1)

### Protocols
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"


### TLS
loadmodule "tls_mgm.so"
loadmodule "proto_tls.so"

modparam("tls_mgm", "certificate", "/etc/ssl/certs/ssl-cert-snakeoil.pem")
modparam("tls_mgm", "private_key", "/etc/ssl/private/ssl-cert-snakeoil.key")
modparam("tls_mgm", "verify_cert", "0")

# UAC
loadmodule "uac.so"
modparam("uac","restore_passwd","my_secret_passwd") # FIXME => to security file
modparam("uac","restore_mode","auto")

# SIP TRACE

### INCLUDED FILES

# SIP LISTENERS
include_file "/opt/irontec/itsbc/config/opensips/opensips_custom_listeners.cfg"


# DATABASE ACCESS
include_file "/opt/irontec/itsbc/config/opensips/opensips_database.cfg"


####### Routing Logic ########

# main request routing logic

route{
    xlog("L_NOTICE","[REQUEST] Executing main route, method $rm from $si with transport $dP");

    if (!mf_process_maxfwd_header("10")) {
        send_reply("483","Too Many Hops");
        exit;
    }

    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans())
            t_relay();
        exit;
    }

    # absorb retransmissions, but do not create transaction
    t_check_trans();

    if (has_totag()) {
        xlog("L_NOTICE","Calling route block for in-dialog request $rm");
        route(indialogrouting);
    }

    # preloaded route checking
    if (loose_route()) {
        xlog("L_ERR", "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
        if (!is_method("ACK"))
            send_reply("403","Preload Route denied");
        exit;
    }

    # First we check if is method register to handle it correctly
    if (is_method("REGISTER")) {
        route(registers);
        exit;
    }

    # record routing:
    if (!is_method("REGISTER|MESSAGE"))
        record_route();

    # Some sanity checks:
    if ($rU==NULL) {
        # request with no Username in RURI
        send_reply("484","Address Incomplete");
        exit;
    }

    # First Requests (not in dialog)
    route(initialrequest);

    exit;
}

route[indialogrouting] {
    xlog("L_DBG","Starting route block for indialogrouting $rm from $si");

    if (topology_hiding_match()) {
        if( (has_body("application/sdp")) && ($dlg_val(rtpismanaged)=="1") ) {
            xlog("L_INFO","This indialog Request $rm has an SDP, calling RTPENGINE_MANAGE");

            if ($si == $dlg_val(sourceip)) {
                $var(rtpengineoptions)="in-iface="+$dlg_val(rtpiniface)+" out-iface="+$dlg_val(rtpoutiface);
            } else {
                $var(rtpengineoptions)="in-iface="+$dlg_val(rtpoutiface)+" out-iface="+$dlg_val(rtpiniface);
            }

            xlog("L_INFO","Rtpengine options will be $var(rtpengineoptions)");
            rtpengine_manage("$var(rtpengineoptions)");
        } else {
            xlog("L_INFO","This indialog Request $rm NO SDP");
        }

        route(relay);
        exit;
    } else {
        # handle hop-by-hop ACK (no routing required)
        if ( is_method("ACK") && t_check_trans() ) {
            t_relay();
            exit;
        }
    }
    # sequential request within a dialog should
    # take the path determined by record-routing
    if ( !loose_route() ) {
        # we do record-routing for all our traffic, so we should not
        # receive any sequential requests without Route hdr.
        send_reply("404","Not here");
        exit;
    }

    # route it out to whatever destination was set by loose_route()
    # in $du (destination URI).
    route(relay);
    exit;
}

route[relay] {
    # for INVITEs enable some additional helper routes
    if (is_method("INVITE")) {
        t_on_reply("handle_reply");
    }

    if (!t_relay()) {
        send_reply("500","Internal Error");
    }
    exit;
}

onreply_route[handle_reply] {
    xlog("L_INFO","[REPLY]  incoming reply $rr $rs from $si\n");
    if((has_body("application/sdp")) && ($dlg_val(rtpismanaged) == "1")) {
        xlog("L_INFO","This REPLY has an SDP, calling RTPENGINE_MANAGE ");
        # We check source IP of reply (so we can know RTP Direction to apply)
        if ($si == $dlg_val(sourceip)) {
            $var(rtpengineoptions)="in-iface="+$dlg_val(rtpiniface)+" out-iface="+$dlg_val(rtpoutiface);
        } else {
            $var(rtpengineoptions)="in-iface="+$dlg_val(rtpoutiface)+" out-iface="+$dlg_val(rtpiniface);
        }

        xlog("L_INFO","Rtpengine options will be $var(rtpengineoptions)");
        rtpengine_manage("$var(rtpengineoptions)");
    }
    # In case of NAT:
    fix_nated_contact();
}

route[registers] {
    # Get info from incoming request
    avp_db_query("SELECT redOrigen, CONCAT('sip:', registrarServer, ':', registrarPort) AS destino, CONCAT(registrarTransport, ':', ipSalida, ':', portSalida) AS ifacesalida FROM routing_registers WHERE ipEntrada='$Ri' AND domain='$fd' ORDER BY metrica ASC LIMIT 1", "$avp(allowedNet);$avp(destino);$avp(ifacesalida)");

    # Check source IP address is valid
    route(checksourceip);

    # Check results
    route(checkresults);

    fix_nated_register();
    add_rcv_param();
    xlog("L_INFO","Route decision: Forwarding this request to $avp(destino) with forced socket $avp(ifacesalida)");
    mid_registrar_save("location");
    switch ($retcode) {
        case 1:
            xlog("L_DBG","Really forwarding REGISTER to main registrar ($$ci=$ci)\n");
            $fs=$avp(ifacesalida);
            $ru = $avp(destino);
            t_relay();
            break;
        case 2:
            xlog("L_DBG","absorbing REGISTER! ($$ci=$ci)\n");
            break;
        default:
            xlog("L_ERR","failed to save registration! ($$ci=$ci)\n");
    }

    exit;
}

route[initialrequest] {
    # MAIN Query to database:
    avp_db_query("SELECT routing_requests.handleRtp,routing_requests.incomingRtpInterface_id,routing_requests.outgoingRtpInterface_id,routing_requests.redOrigen,routing_requests.nextHopTransport, routing_requests.nextHop,CONCAT(routing_requests.nextHop, ':', routing_requests.nextHopPort) AS destino, CONCAT(routing_requests.nextHopTransport, ':', routing_requests.ipSalida, ':', routing_requests.portSalida) AS ifacesalida FROM routing_requests WHERE ipEntrada='$Ri' AND domain='$rd' ORDER BY metrica ASC LIMIT 1", "$avp(handleRtp);$avp(idrtpin);$avp(idrtpout);$avp(allowedNet);$avp(nextHopTransport);$avp(nextHop);$avp(destino);$avp(ifacesalida)");

    # Check source IP address is valid
    route(checksourceip);
    # check results
    route(checkresults);

    # Building destination:
    switch ($avp(nextHopTransport)){
        case "UDP":
            $avp(destino)="sip:"+$avp(destino);
            break;
        case "TCP":
            $avp(destino)="sip:"+$avp(destino)+";transport=tcp";
            break;
        case "TLS":
            $avp(destino)="sip:"+$avp(destino)+";transport=tls";
            break;
    }
    xlog("L_INFO","Destination will be $avp(destino)");
    create_dialog();
    if ( ($avp(handleRtp) != "0") && has_body("application/sdp")) {
        xlog("L_INFO","RTP needs to be managed");
        $dlg_val(rtpismanaged)="1";
        route(setuprtpoptions);
        $dlg_val(rtpiniface)=$avp(rtpinname);
        $dlg_val(rtpoutiface)=$avp(rtpoutname);
        $var(rtpengineoptions)="in-iface="+$dlg_val(rtpiniface)+" out-iface="+$dlg_val(rtpoutiface);
        }
    else{
        xlog("L_INFO","RTP is unmanaged by rule");
        $dlg_val(rtpismanaged)="0";
        }


    # We store RTP Options on dialog values:
    $dlg_val(sourceip)=$si;

    force_rport();
    fix_nated_contact();

    # Topology Hiding
    if (is_method("INVITE")) {
        xlog("L_INFO","Method is INVITE calling topology hiding");
        topology_hiding("C");
    }

    # NAT
    if( (has_body("application/sdp")) && ($dlg_val(rtpismanaged)=="1")){
        xlog("L_DBG","This request has SDP - calling RTPENGINE MANAGE");
        rtpengine_manage("$var(rtpengineoptions)");
    }

    # Requests using midregistrar:
    if ($(avp(destino){s.substr,4,6})=="lookup") {
        xlog("L_DBG","SIP Destination is LOOKUP, so looking up");
        if (!mid_registrar_lookup("location")) {
            t_reply("404", "Not Found");
            exit;
        } else {
            xlog("L_INFO","Lookup (MIDREGISTRAR) is OK, now forwarding to $du");
            $fs = $avp(ifacesalida);
            $rd = $avp(nextHop);
            route(relay);
        }
    }
    # Requests not midregistrar:
    $du = $avp(destino);
    $fs = $avp(ifacesalida);
    $rd = $avp(nextHop);
    route(relay);
}

route[checkresults] {
    xlog("L_INFO","Checking database  results");
    xlog("L_DBG","  ifacesalida: $avp(ifacesalida)");
    xlog("L_DBG","  destino: $avp(destino)");
    xlog("L_DBG","  allowednet: $avp(allowedNet)");

    if ($avp(destino) == null) {
        send_reply("502","Nothing to with this");
    }
}


# Thanks to Nick Altmann for posting this on mailing list:
# Check IP belongs to subnet
# ----------------------------------------------------------------------
route[checksourceip] {
    $var(ipr_check_net)=$avp(allowedNet);
    $var(ipr_check_ip)=$si;

    if ($avp(allowedNet) == "0.0.0.0/0.0.0.0") {
        xlog("L_INFO","Rule has all-IN 0.0.0.0/2, lets go");
        return (1);
    }
    # Convert network address into decimal format
    $var(net_addr1) = $(var(ipr_check_net){s.select,0,.}{s.int}); # ipnet, part 1
    $var(net_addr2) = $(var(ipr_check_net){s.select,1,.}{s.int}); # ipnet, part 2
    $var(net_addr3) = $(var(ipr_check_net){s.select,2,.}{s.int}); # ipnet, part 3
    $var(net_addr4) = $(var(ipr_check_net){s.select,3,.}{s.int}); # ipnet, part 4
    $var(net_addr) = ($var(net_addr1)<<24) + ($var(net_addr2)<<16) + ($var(net_addr3)<<8) + ($var(net_addr4));

    $var(net_mask_dot)  =   $(var(ipr_check_net){s.select,1,/});
    $var(net_mask_1)    =   $(var(net_mask_dot){s.select,1,.}{s.int});
    $var(net_mask_2)    =   $(var(net_mask_dot){s.select,2,.}{s.int});
    $var(net_mask_3)    =   $(var(net_mask_dot){s.select,3,.}{s.int});
    $var(net_mask_4)    =   $(var(net_mask_dot){s.select,4,.}{s.int});
    $var(net_mask)      =   ($var(net_mask_1)<<24) + ($var(net_mask_2)<<16) + ($var(net_mask_3)<<8) + ($var(net_mask_4));

    # Convert IP address into decimal format
    $var(ip_addr1) = $(var(ipr_check_ip){s.select,0,.}{s.int}); # ipaddr, part 1
    $var(ip_addr2) = $(var(ipr_check_ip){s.select,1,.}{s.int}); # ipaddr, part 2
    $var(ip_addr3) = $(var(ipr_check_ip){s.select,2,.}{s.int}); # ipaddr, part 3
    $var(ip_addr4) = $(var(ipr_check_ip){s.select,3,.}{s.int}); # ipaddr, part 4
    $var(ip_addr) = ($var(ip_addr1)<<24) + ($var(ip_addr2)<<16) + ($var(ip_addr3)<<8) + ($var(ip_addr4));

    $var(op1)=$var(net_addr) & $var(net_mask);
    $var(op2)=$var(ip_addr) & $var(net_mask);

    if ( $var(op1) != $var(op2)) {
        xlog("L_ERR","IP $var(ipr_check_ip) NOT IN subnet $var(ipr_check_net)");
        send_reply("403","Forbidden not allowed IP");
        exit;
    }
    xlog("L_DBG","IP $var(ipr_check_ip) belongs to $var(ipr_check_net)");
}

route[setuprtpoptions] {
    xlog("L_INFO","Looking up database for RTP Options for rtp IN ID $avp(idrtpin)");
    avp_db_query("SELECT nombre from media_ips where id=$avp(idrtpin) LIMIT 1", "$avp(rtpinname)");

    xlog("L_INFO","Looking up database for RTP Options for rtp OUT ID $avp(idrtpout)");
    avp_db_query("SELECT nombre from media_ips where id=$avp(idrtpout) LIMIT 1", "$avp(rtpoutname)");

    xlog("L_INFO","RTPIN will be $avp(rtpinname) and RTPOUT will be $avp(rtpoutname)");
}
